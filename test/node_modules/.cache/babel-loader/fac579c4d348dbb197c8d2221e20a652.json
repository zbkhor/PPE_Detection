{"remainingRequest":"C:\\PPE_Detection\\test\\node_modules\\thread-loader\\dist\\cjs.js!C:\\PPE_Detection\\test\\node_modules\\babel-loader\\lib\\index.js!C:\\PPE_Detection\\test\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\PPE_Detection\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\PPE_Detection\\test\\src\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\PPE_Detection\\test\\src\\Home.vue","mtime":1657696264014},{"path":"C:\\PPE_Detection\\test\\babel.config.js","mtime":1656468554132},{"path":"C:\\PPE_Detection\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657695287597},{"path":"C:\\PPE_Detection\\test\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1657695283903},{"path":"C:\\PPE_Detection\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":1657695287786},{"path":"C:\\PPE_Detection\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657695287597},{"path":"C:\\PPE_Detection\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":1657695283812}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UuanMiOwp2YXIgYm94ZXM7CmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMnOwppbXBvcnQgeyBsb2FkR3JhcGhNb2RlbCB9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29udmVydGVyJzsKaW1wb3J0IHsgZHJhd1JlY3QgfSBmcm9tICIuL3V0aWxpdGllcyI7CmNvbnN0IE1PREVMX1VSTCA9ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vemJraG9yL0V4cG9ydE1vZGVsL21haW4vbW9kZWwvbW9kZWwuanNvbic7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnSG9tZScsCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICAvLyBzdG9yZSB0aGUgcHJvbWlzZXMgb2YgaW5pdGlhbGl6YXRpb24KICAgICAgc3RyZWFtUHJvbWlzZTogbnVsbCwKICAgICAgbW9kZWxQcm9taXNlOiBudWxsLAogICAgICAvLyBjb250cm9sIHRoZSBVSSB2aXNpYmlsaXRpZXMKICAgICAgaXNWaWRlb1N0cmVhbVJlYWR5OiBmYWxzZSwKICAgICAgaXNNb2RlbFJlYWR5OiBmYWxzZSwKICAgICAgaW5pdEZhaWxNZXNzYWdlOiAnJywKICAgICAgLy8gdGZqcyBtb2RlbCByZWxhdGVkCiAgICAgIG1vZGVsOiBudWxsLAogICAgICB2aWRlb1JhdGlvOiAxLAogICAgICByZXN1bHRXaWR0aDogMCwKICAgICAgcmVzdWx0SGVpZ2h0OiAwCiAgICB9OwogIH0sCgogIG1ldGhvZHM6IHsKICAgIGluaXRXZWJjYW1TdHJlYW0oKSB7CiAgICAgIC8vIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIG1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgQVBJCiAgICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7CiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsKICAgICAgICAgIGF1ZGlvOiBmYWxzZSwKICAgICAgICAgIC8vIGRvbid0IGNhcHR1cmUgYXVkaW8KICAgICAgICAgIHZpZGVvOiB7CiAgICAgICAgICAgIGZhY2luZ01vZGU6ICdlbnZpcm9ubWVudCcKICAgICAgICAgIH0gLy8gdXNlIHRoZSByZWFyIGNhbWVyYSBpZiB0aGVyZSBpcwoKICAgICAgICB9KS50aGVuKHN0cmVhbSA9PiB7CiAgICAgICAgICAvLyBzZXQgPHZpZGVvPiBzb3VyY2UgYXMgdGhlIHdlYmNhbSBpbnB1dAogICAgICAgICAgbGV0IHZpZGVvID0gdGhpcy4kcmVmcy52aWRlbzsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07CiAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICAvLyBzdXBwb3J0IG9sZGVyIGJyb3dzZXJzCiAgICAgICAgICAgIHZpZGVvLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKTsKICAgICAgICAgIH0KICAgICAgICAgIC8qDQogICAgICAgICAgICBtb2RlbC5kZXRlY3QgdXNlcyB0Zi5mcm9tUGl4ZWxzIHRvIGNyZWF0ZSB0ZW5zb3JzLg0KICAgICAgICAgICAgdGYuZnJvbVBpeGVscyBhcGkgd2lsbCBnZXQgdGhlIDx2aWRlbz4gc2l6ZSBmcm9tIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGF0dHJpYnV0ZXMsDQogICAgICAgICAgICAgIHdoaWNoIG1lYW5zIDx2aWRlbz4gd2lkdGggYW5kIGhlaWdodCBhdHRyaWJ1dGVzIG5lZWRzIHRvIGJlIHNldCBiZWZvcmUgY2FsbGVkIG1vZGVsLmRldGVjdA0KICAgICAgICAgICAgICBUbyBtYWtlIHRoZSA8dmlkZW8+IHJlc3BvbnNpdmUsIEkgZ2V0IHRoZSBpbml0aWFsIHZpZGVvIHJhdGlvIHdoZW4gaXQncyBsb2FkZWQgKG9ubG9hZGVkbWV0YWRhdGEpDQogICAgICAgICAgICBUaGVuIGFkZEV2ZW50TGlzdGVuZXIgb24gcmVzaXplLCB3aGljaCB3aWxsIGFkanVzdCB0aGUgc2l6ZSBidXQgcmVtYWluIHRoZSByYXRpbw0KICAgICAgICAgICAgQXQgbGFzdCwgcmVzb2x2ZSB0aGUgUHJvbWlzZS4NCiAgICAgICAgICAqLwoKCiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgICAgICAvLyB3aGVuIHZpZGVvIGlzIGxvYWRlZAogICAgICAgICAgICB2aWRlby5vbmxvYWRlZG1ldGFkYXRhID0gKCkgPT4gewogICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgdmlkZW8gcmF0aW8KICAgICAgICAgICAgICB0aGlzLnZpZGVvUmF0aW8gPSB2aWRlby5vZmZzZXRIZWlnaHQgLyB2aWRlby5vZmZzZXRXaWR0aDsgLy8gYWRkIGV2ZW50IGxpc3RlbmVyIG9uIHJlc2l6ZSB0byByZXNldCB0aGUgPHZpZGVvPiBhbmQgPGNhbnZhcz4gc2l6ZXMKCiAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2V0UmVzdWx0U2l6ZSk7IC8vIHNldCB0aGUgaW5pdGlhbCBzaXplCgogICAgICAgICAgICAgIHRoaXMuc2V0UmVzdWx0U2l6ZSgpOwogICAgICAgICAgICAgIHRoaXMuaXNWaWRlb1N0cmVhbVJlYWR5ID0gdHJ1ZTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnd2ViY2FtIHN0cmVhbSBpbml0aWFsaXplZCcpOwogICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsZWQgdG8gaW5pdGlhbGl6ZSB3ZWJjYW0gc3RyZWFtJywgZXJyb3IpOwogICAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgbWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSBBUEknKSk7CiAgICAgIH0KICAgIH0sCgogICAgc2V0UmVzdWx0U2l6ZSgpIHsKICAgICAgLy8gZ2V0IHRoZSBjdXJyZW50IGJyb3dzZXIgd2luZG93IHNpemUKICAgICAgbGV0IGNsaWVudFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoOyAvLyBzZXQgbWF4IHdpZHRoIGFzIDYwMAoKICAgICAgdGhpcy5yZXN1bHRXaWR0aCA9IE1hdGgubWluKDY0MCwgY2xpZW50V2lkdGgpOyAvLyBzZXQgdGhlIGhlaWdodCBhY2NvcmRpbmcgdG8gdGhlIHZpZGVvIHJhdGlvCgogICAgICB0aGlzLnJlc3VsdEhlaWdodCA9IDY0MDsgLy8gc2V0IDx2aWRlbz4gd2lkdGggYW5kIGhlaWdodAoKICAgICAgLyoNCiAgICAgICAgRG9lc24ndCB1c2UgdnVlIGJpbmRpbmcgOndpZHRoIGFuZCA6aGVpZ2h0LA0KICAgICAgICAgIGJlY2F1c2UgdGhlIGluaXRpYWwgdmFsdWUgb2YgcmVzdWx0V2lkdGggYW5kIHJlc3VsdEhlaWdodA0KICAgICAgICAgIHdpbGwgYWZmZWN0IHRoZSByYXRpbyBnb3QgZnJvbSB0aGUgaW5pdFdlYmNhbVN0cmVhbSgpDQogICAgICAqLwoKICAgICAgbGV0IHZpZGVvID0gdGhpcy4kcmVmcy52aWRlbzsKICAgICAgdmlkZW8ud2lkdGggPSB0aGlzLnJlc3VsdFdpZHRoOwogICAgICB2aWRlby5oZWlnaHQgPSB0aGlzLnJlc3VsdEhlaWdodDsKICAgIH0sCgogICAgbG9hZEN1c3RvbU1vZGVsKCkgewogICAgICB0aGlzLmlzTW9kZWxSZWFkeSA9IGZhbHNlOyAvLyBsb2FkIHRoZSBtb2RlbCB3aXRoIGxvYWRHcmFwaE1vZGVsCgogICAgICByZXR1cm4gbG9hZEdyYXBoTW9kZWwoTU9ERUxfVVJMKS50aGVuKG1vZGVsID0+IHsKICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7CiAgICAgICAgdGhpcy5pc01vZGVsUmVhZHkgPSB0cnVlOwogICAgICAgIGNvbnNvbGUubG9nKCdtb2RlbCBsb2FkZWQ6ICcsIG1vZGVsKTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCdmYWlsZWQgdG8gbG9hZCB0aGUgbW9kZWwnLCBlcnJvcik7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSwKCiAgICBhc3luYyBkZXRlY3RPYmplY3RzKCkgewogICAgICBpZiAoIXRoaXMuaXNNb2RlbFJlYWR5KSByZXR1cm47CiAgICAgIGNvbnN0IGltZyA9IHRmLmJyb3dzZXIuZnJvbVBpeGVscyh0aGlzLiRyZWZzLnZpZGVvKTsKICAgICAgY29uc3QgcmVzaXplZCA9IHRmLmltYWdlLnJlc2l6ZUJpbGluZWFyKGltZywgWzY0MCwgNjQwXSk7CiAgICAgIGNvbnN0IGNhc3RlZCA9IHJlc2l6ZWQuY2FzdCgnaW50MzInKTsKICAgICAgY29uc3QgZXhwYW5kZWQgPSBjYXN0ZWQuZXhwYW5kRGltcygwKTsKICAgICAgY29uc3Qgb2JqID0gYXdhaXQgdGhpcy5tb2RlbC5leGVjdXRlQXN5bmMoZXhwYW5kZWQpOwogICAgICBjb25zb2xlLmxvZyhvYmpbMV0uYXJyYXkoKSk7CiAgICAgIGNvbnNvbGUubG9nKG9ials0XS5hcnJheSgpKTsgLy9jaGVjayB0aGUgc2l6ZSBhbmQgYXNzaWduIHRvIGNvcnJlY3QgdGVuc29yCgogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykgewogICAgICAgIGNvbnNvbGUubG9nKCdubycpOwoKICAgICAgICBpZiAob2JqW2ldLnNpemUgPT0gNDAwICYmIG9ialtpXS5zaGFwZS5sZW5ndGggPT0gMykgewogICAgICAgICAgdmFyIGJveGVzID0gYXdhaXQgb2JqW2ldLmFycmF5KCk7CiAgICAgICAgICBjb25zb2xlLmxvZyhib3hlcyk7CiAgICAgICAgfSBlbHNlIGlmIChvYmpbaV0uc2l6ZSA9PSAxMDAgJiYgb2JqW2ldLnNoYXBlLmxlbmd0aCA9PSAyKSB7CiAgICAgICAgICB2YXIgbm90c3VyZSA9IGF3YWl0IG9ialtpXS5hcnJheSgpOwogICAgICAgICAgY29uc29sZS5sb2coKTsKCiAgICAgICAgICBpZiAobm90c3VyZVswXVswXSA8IDEpIHsKICAgICAgICAgICAgdmFyIHNjb3JlcyA9IGF3YWl0IG9ialtpXS5hcnJheSgpOwogICAgICAgICAgfSBlbHNlIGlmIChub3RzdXJlWzBdWzBdID49IDEpIHsKICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBhd2FpdCBvYmpbaV0uYXJyYXkoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gLy8gY29uc3QgYm94ZXMgPSBhd2FpdCBvYmpbM10uYXJyYXkoKQogICAgICAvLyBjb25zdCBjbGFzc2VzID0gYXdhaXQgb2JqWzRdLmFycmF5KCkKICAgICAgLy8gY29uc3Qgc2NvcmVzID0gYXdhaXQgb2JqWzFdLmFycmF5KCkKCgogICAgICBjb25zb2xlLmxvZyhib3hlcyk7CiAgICAgIGNvbnNvbGUubG9nKHR5cGVvZiBvYmpbM10uc2l6ZSk7CiAgICAgIGNvbnNvbGUubG9nKG9ialszXS5zaGFwZS5sZW5ndGgpOwogICAgICBjb25zb2xlLmxvZyhvYmpbNF0uc2l6ZSk7CiAgICAgIGNvbnNvbGUubG9nKG9ials0XS5zaGFwZS5sZW5ndGgpOwogICAgICBjb25zb2xlLmxvZyhvYmpbMV0uc2l6ZSk7CiAgICAgIGNvbnNvbGUubG9nKG9ialsxXS5zaGFwZS5sZW5ndGgpOyAvLyB0aGlzLnJlbmRlclByZWRpY3Rpb25Cb3hlcyhwcmVkaWN0aW9uc1swXS5kYXRhU3luYygpLCBwcmVkaWN0aW9uc1sxXS5kYXRhU3luYygpLCBwcmVkaWN0aW9uc1syXS5kYXRhU3luYygpLCBwcmVkaWN0aW9uc1szXS5kYXRhU3luYygpKQoKICAgICAgY29uc3QgY3R4ID0gdGhpcy4kcmVmcy5jYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHsKICAgICAgICBkcmF3UmVjdChib3hlc1swXSwgY2xhc3Nlc1swXSwgc2NvcmVzWzBdLCAwLjUsIHRoaXMuJHJlZnMudmlkZW8ud2lkdGgsIHRoaXMuJHJlZnMudmlkZW8uaGVpZ2h0LCBjdHgpOwogICAgICB9KTsKICAgICAgdGYuZGlzcG9zZShpbWcpOwogICAgICB0Zi5kaXNwb3NlKHJlc2l6ZWQpOwogICAgICB0Zi5kaXNwb3NlKGNhc3RlZCk7CiAgICAgIHRmLmRpc3Bvc2UoZXhwYW5kZWQpOwogICAgICB0Zi5kaXNwb3NlKG9iaik7CiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy4kcmVmcy5jYW52YXMud2lkdGgsIHRoaXMuJHJlZnMuY2FudmFzLmhlaWdodCk7CiAgICAgIGNvbnNvbGUubG9nKCdjbGVhcmVkJyk7CiAgICB9LAoKICAgIGxvYWRNb2RlbEFuZERldGVjdGlvbigpIHsKICAgICAgdGhpcy5tb2RlbFByb21pc2UgPSB0aGlzLmxvYWRDdXN0b21Nb2RlbCgpOyAvLyB3YWl0IGZvciBib3RoIHN0cmVhbSBhbmQgbW9kZWwgcHJvbWlzZSBmaW5pc2hlZCB0aGVuIHN0YXJ0IGRldGVjdGluZyBvYmplY3RzCgogICAgICBQcm9taXNlLmFsbChbdGhpcy5zdHJlYW1Qcm9taXNlLCB0aGlzLm1vZGVsUHJvbWlzZV0pLnRoZW4oKCkgPT4gewogICAgICAgIHNldEludGVydmFsKHRoaXMuZGV0ZWN0T2JqZWN0cywgMTAwMCk7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGluaXQgc3RyZWFtIGFuZC9vciBtb2RlbDogJyk7CiAgICAgICAgdGhpcy5pbml0RmFpbE1lc3NhZ2UgPSBlcnJvcjsKICAgICAgfSk7CiAgICB9CgogIH0sCgogIG1vdW50ZWQoKSB7CiAgICB0aGlzLnN0cmVhbVByb21pc2UgPSB0aGlzLmluaXRXZWJjYW1TdHJlYW0oKTsKICAgIHRoaXMubG9hZE1vZGVsQW5kRGV0ZWN0aW9uKCk7CiAgfQoKfTs="},{"version":3,"mappings":";AAcA;AACA;AACA;AACA;AACA;AAEA;EACAA,YADA;;EAGAC;IACA;MACA;MACAC,mBAFA;MAGAC,kBAHA;MAKA;MACAC,yBANA;MAOAC,mBAPA;MAQAC,mBARA;MAUA;MACAC,WAXA;MAaAC,aAbA;MAcAC,cAdA;MAeAC;IAfA;EAiBA,CArBA;;EAuBAC;IACAC;MACA;MACA;QACA;UACAC,YADA;UACA;UACAC;YAAAC;UAAA,CAFA,CAEA;;QAFA,GAIAC,IAJA,CAIAC;UACA;UACA;;UACA;YACAH;UACA,CAFA,CAEA;YACA;YACAA;UACA;UAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;UAEA;YACA;YACAA;cACA;cACA,yDAFA,CAGA;;cACAI,sDAJA,CAKA;;cACA;cAEA;cACAC;cACAC;YACA,CAXA;UAYA,CAdA;QAeA,CAtCA,EAuCAC,KAvCA,CAuCAC;UACAH;UACA;QACA,CA1CA;MA2CA,CA5CA,MA4CA;QACA;MACA;IACA,CAlDA;;IAoDAI;MACA;MACA,uDAFA,CAIA;;MACA,8CALA,CAMA;;MACA,wBAPA,CASA;;MACA;AACA;AACA;AACA;AACA;;MACA;MACAT;MACAA;IACA,CAtEA;;IAwEAU;MACA,0BADA,CAGA;;MACA,iCACAR,IADA,CACAT;QACA;QACA;QACAY;MACA,CALA,EAMAE,KANA,CAMAC;QACAH;QACA;MACA,CATA;IAUA,CAtFA;;IAwFA;MACA;MAEA;MACA;MACA;MACA;MACA;MACAA;MACAA,4BATA,CAUA;;MACA;QACAA;;QACA;UAEA;UACAA;QAEA,CALA,MAKA;UAEA;UACAA;;UAEA;YAEA;UACA,CAHA,MAGA;YACA;UACA;QACA;MACA,CA9BA,CAgCA;MACA;MACA;;;MACAA;MACAA;MACAA;MACAA;MACAA;MACAA;MACAA,iCAzCA,CA2CA;;MACA;MACAM;QAAAC;MAAA;MAEAC;MACAA;MACAA;MACAA;MACAA;MACAC;MACAT;IACA,CA9IA;;IAgJAU;MACA,2CADA,CAGA;;MACAC,qDACAd,IADA,CACA;QACAe;MACA,CAHA,EAGAV,KAHA,CAGAC;QACAH;QACA;MACA,CANA;IAOA;;EA3JA,CAvBA;;EAuLAa;IACA;IACA;EAEA;;AA3LA","names":["name","data","streamPromise","modelPromise","isVideoStreamReady","isModelReady","initFailMessage","model","videoRatio","resultWidth","resultHeight","methods","initWebcamStream","audio","video","facingMode","then","stream","window","console","resolve","catch","error","setResultSize","loadCustomModel","requestAnimationFrame","drawRect","tf","ctx","loadModelAndDetection","Promise","setInterval","mounted"],"sourceRoot":"src","sources":["Home.vue"],"sourcesContent":["<template>\r\n  <div id=\"Home\">\r\n    <h3 v-if=\"!isVideoStreamReady && !initFailMessage\">Initializing webcam stream ...</h3>\r\n    <h3 v-if=\"!isModelReady && !initFailMessage\">loading model ...</h3>\r\n    <h3 v-if=\"initFailMessage\">Failed to init stream and/or model - {{ initFailMessage }}</h3>\r\n\r\n    <div class=\"resultFrame\">\r\n      <video ref=\"video\" autoplay></video>\r\n      <canvas ref=\"canvas\" :width=\"resultWidth\" :height=\"resultHeight\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nvar boxes;\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport { loadGraphModel } from '@tensorflow/tfjs-converter'\r\nimport {drawRect} from \"./utilities\"; \r\nconst MODEL_URL = 'https://raw.githubusercontent.com/zbkhor/ExportModel/main/model/model.json'\r\n\r\nexport default {\r\n  name: 'Home',\r\n\r\n  data () {\r\n    return {\r\n      // store the promises of initialization\r\n      streamPromise: null,\r\n      modelPromise: null,\r\n\r\n      // control the UI visibilities\r\n      isVideoStreamReady: false,\r\n      isModelReady: false,\r\n      initFailMessage: '',\r\n\r\n      // tfjs model related\r\n      model: null,\r\n\r\n      videoRatio: 1,\r\n      resultWidth: 0,\r\n      resultHeight: 0\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    initWebcamStream () {\r\n      // if the browser supports mediaDevices.getUserMedia API\r\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n        return navigator.mediaDevices.getUserMedia({\r\n          audio: false, // don't capture audio\r\n          video: { facingMode: 'environment' } // use the rear camera if there is\r\n        })\r\n          .then(stream => {\r\n            // set <video> source as the webcam input\r\n            let video = this.$refs.video\r\n            try {\r\n              video.srcObject = stream\r\n            } catch (error) {\r\n              // support older browsers\r\n              video.src = URL.createObjectURL(stream)\r\n            }\r\n\r\n            /*\r\n              model.detect uses tf.fromPixels to create tensors.\r\n              tf.fromPixels api will get the <video> size from the width and height attributes,\r\n                which means <video> width and height attributes needs to be set before called model.detect\r\n\r\n              To make the <video> responsive, I get the initial video ratio when it's loaded (onloadedmetadata)\r\n              Then addEventListener on resize, which will adjust the size but remain the ratio\r\n              At last, resolve the Promise.\r\n            */\r\n            return new Promise((resolve, reject) => {\r\n              // when video is loaded\r\n              video.onloadedmetadata = () => {\r\n                // calculate the video ratio\r\n                this.videoRatio = video.offsetHeight / video.offsetWidth\r\n                // add event listener on resize to reset the <video> and <canvas> sizes\r\n                window.addEventListener('resize', this.setResultSize)\r\n                // set the initial size\r\n                this.setResultSize()\r\n\r\n                this.isVideoStreamReady = true\r\n                console.log('webcam stream initialized')\r\n                resolve()\r\n              }\r\n            })\r\n          })\r\n          .catch(error => {\r\n            console.log('failed to initialize webcam stream', error)\r\n            throw (error)\r\n          })\r\n      } else {\r\n        return Promise.reject(new Error('Your browser does not support mediaDevices.getUserMedia API'))\r\n      }\r\n    },\r\n    \r\n    setResultSize () {\r\n      // get the current browser window size\r\n      let clientWidth = document.documentElement.clientWidth\r\n\r\n      // set max width as 600\r\n      this.resultWidth = Math.min(640, clientWidth)\r\n      // set the height according to the video ratio\r\n      this.resultHeight = 640\r\n\r\n      // set <video> width and height\r\n      /*\r\n        Doesn't use vue binding :width and :height,\r\n          because the initial value of resultWidth and resultHeight\r\n          will affect the ratio got from the initWebcamStream()\r\n      */\r\n      let video = this.$refs.video\r\n      video.width = this.resultWidth\r\n      video.height = this.resultHeight\r\n    },\r\n\r\n    loadCustomModel () {\r\n      this.isModelReady = false\r\n\r\n      // load the model with loadGraphModel\r\n      return loadGraphModel(MODEL_URL)\r\n        .then((model) => {\r\n          this.model = model\r\n          this.isModelReady = true\r\n          console.log('model loaded: ', model)\r\n        })\r\n        .catch((error) => {\r\n          console.log('failed to load the model', error)\r\n          throw (error)\r\n        })\r\n    },\r\n    \r\n    async detectObjects () {\r\n      if (!this.isModelReady) return\r\n\r\n      const img = tf.browser.fromPixels(this.$refs.video)\r\n      const resized = tf.image.resizeBilinear(img, [640,640])\r\n      const casted = resized.cast('int32')\r\n      const expanded = casted.expandDims(0)\r\n      const obj = await this.model.executeAsync(expanded)\r\n      console.log(obj[1].array()) \r\n      console.log(obj[4].array())\r\n      //check the size and assign to correct tensor\r\n      for(let i = 0;i <8; i++){\r\n       console.log('no')\r\n       if (obj[i].size==400 && obj[i].shape.length==3){\r\n     \r\n        var boxes = await obj[i].array()\r\n        console.log(boxes)\r\n       \r\n       }else if (obj[i].size==100 && obj[i].shape.length==2){\r\n         \r\n          var notsure = await obj[i].array()\r\n          console.log()\r\n        \r\n          if (notsure[0][0] < 1){\r\n           \r\n           var scores = await obj[i].array()\r\n          }else if (notsure[0][0] >=1){\r\n            var classes = await obj[i].array()\r\n          }\r\n       }  \r\n      }\r\n      \r\n      // const boxes = await obj[3].array()\r\n      // const classes = await obj[4].array()\r\n      // const scores = await obj[1].array()\r\n      console.log(boxes)\r\n      console.log(typeof obj[3].size)\r\n      console.log(obj[3].shape.length)\r\n      console.log(obj[4].size)\r\n      console.log(obj[4].shape.length)\r\n      console.log(obj[1].size)\r\n      console.log(obj[1].shape.length)\r\n      \r\n      // this.renderPredictionBoxes(predictions[0].dataSync(), predictions[1].dataSync(), predictions[2].dataSync(), predictions[3].dataSync())\r\n      const ctx = this.$refs.canvas.getContext(\"2d\");\r\n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.5, this.$refs.video.width, this.$refs.video.height, ctx)}); \r\n\r\n      tf.dispose(img)\r\n      tf.dispose(resized)\r\n      tf.dispose(casted)\r\n      tf.dispose(expanded)\r\n      tf.dispose(obj)\r\n      ctx.clearRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height);\r\n      console.log('cleared')\r\n    },\r\n\r\n    loadModelAndDetection () {\r\n      this.modelPromise = this.loadCustomModel()\r\n\r\n      // wait for both stream and model promise finished then start detecting objects\r\n      Promise.all([this.streamPromise, this.modelPromise])\r\n        .then(() => {\r\n          setInterval(this.detectObjects,1000)\r\n        }).catch((error) => {\r\n          console.log('Failed to init stream and/or model: ')\r\n          this.initFailMessage = error\r\n        })\r\n    },\r\n\r\n\r\n  },\r\n\r\n  mounted () {\r\n    this.streamPromise = this.initWebcamStream()\r\n    this.loadModelAndDetection()\r\n    \r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\nbody {\r\n  margin: 0;\r\n}\r\n\r\n.resultFrame {\r\n  display: grid;\r\n\r\n  video {\r\n    grid-area: 1 / 8 / 2 / 8;\r\n  }\r\n  canvas {\r\n    grid-area: 1 / 8 / 2 / 8;\r\n  }\r\n}\r\n</style>\r\n"]}]}